variables:
  TF_ROOT: ${CI_PROJECT_DIR}/infra
  AUTHORIZED_KEY: ${AUTHORIZED_KEY}
  GITLAB_USER: ${GITLAB_USER}
  GITLAB_ACCESS_TOKEN: ${GITLAB_ACCESS_TOKEN}
  GITLAB_TERRAFORM_API_URL: "https://cloud-services-engineer.gitlab.yandexcloud.net/api/v4/projects/${CI_PROJECT_ID}/terraform/state/default"
  OPERATION:
    description: "Select CI/CD-operation"
    value: "terraform"
    options:
      - "terraform"
      - "ansible"
      - "k8s"
  
before_script:
  - cd ${TF_ROOT}
  - echo ${AUTHORIZED_KEY} | base64 -d > ./authorized_key.json

# Пример stages для пайплайна
stages:
  - tests
  - plan
  - apply
  - terratest
  - ansible_deploy
  - destroy
  - build
  - package
  
# Выполнение тестов checkov
#security_scan:


plan:
  stage: plan
  script:
    - echo "Running Terraform plan..."
    - terraform init
    - | 
      backend-config="address=${GITLAB_TERRAFORM_API_URL}" \
        -backend-config="lock_address=${GITLAB_TERRAFORM_API_URL}/lock" \
        -backend-config="unlock_address=${GITLAB_TERRAFORM_API_URL}/lock" \
        -backend-config="username=${GITLAB_USER}" \
        -backend-config="password=${GITLAB_ACCESS_TOKEN}" \
        -backend-config="lock_method=POST" \
        -backend-config="unlock_method=DELETE" \
        -backend-config="retry_wait_min=5"
    - terraform plan
  rules:
    - if: $OPERATION == "terraform"
      when: always 

# Создание инфраструктуры Terraform
#apply:


# Выполнение тестов terratest
#terratest:


# Деплой ansible-playbook
#ansible-deploy:


# Удаление инфраструктуры Terraform
#destroy:


# Сборка и пуш Docker-образов в DockerHub
#build-and-push-images:


# Упаковка и пуш Helm-чарта в Nexus
#package-helm-chart:
